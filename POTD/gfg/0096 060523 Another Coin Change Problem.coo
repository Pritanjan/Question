// https://practice.geeksforgeeks.org/problems/09b910559335521654aa2909f86f893447d8f5ba/1


class Solution {
public:
    bool makeChanges(int N, int K, int target, vector<int>& coins) {
        int v[1010][110] = {};

        function<int(int, int)> can = [&](int t, int k) -> int {
            if (v[t][k] != 0) return v[t][k];
            if (k == 0) return t ? -1 : 1;
            for (int i = 0; i < N; i++) {
                if (t >= coins[i] && can(t - coins[i], k - 1) == 1) {
                    return v[t][k] = 1;
                }
            }
            return v[t][k] = -1;
        };

        return can(target, K) == 1 ? true : false;
    }
};



class Solution {
  public:
    bool anotherCoinChangeProblem(int i,int N,int K,int target,vector<int>&coins){
        if(i==N){
            if(target==0&&K==0){
                return true;
            }
            else{
                return false;
            }
        }
        bool notTake=anotherCoinChangeProblem(i+1,N,K,target,coins);
        bool take=false;
        if(coins[i]<=target&&K>0){
            take=anotherCoinChangeProblem(i,N,K-1,target-coins[i],coins);
        }
        return take|notTake;
    }
    bool makeChanges(int N, int K, int target, vector<int> &coins) {
        int i=0;
        return anotherCoinChangeProblem(i,N,K,target,coins);
    }
};


